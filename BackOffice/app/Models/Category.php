<?php

namespace App\Models;

use App\Utils\Database;
use BackOffice\Utils\Database as UtilsDatabase;
use PDO;

class Category extends \BackOffice\Models\CoreModel {

    protected $title;
    protected $description;
    protected $picture;

    // I must implements these methods

    /** 
     * Method to find a category with an id
     * 
     * @param int 
     * @return Category
    */

    public static function find($id) {
        $pdo = UtilsDatabase::getPDO();

        $sql = 'SELECT * FROM `category` WHERE `id` =' .$id;

        $pdoStatement = $pdo->query($sql);

        $caterory = $pdoStatement->fetchObject('App\Models\Category');

        return $caterory;

    }

    public static function findAll() {
        // TODO
    }

    /**
     * Method to save a new object in the table category
     *
     * @return bool
     */
    protected function insert() {
        $pdo = UtilsDatabase::getPDO();
        $sql = 'INSERT INTO `category` (title, description, picture)
                VALUES (:title, :description, :picture)';
        $pdoStatement = $pdo->prepare($sql);

        // The method 'execute' returns :
        // - TRUE if it successed
        // - FALSE if not
        $insertedRows = $pdoStatement->execute([
            ':title' => $this->title,
            ':description' => $this->description,
            ':picture' => $this->picture
        ]);
        
        // If at least one row is added
        if ($insertedRows === true) {
            // Then we recover the autoincremated id generated by MySQL
            $this->id = $pdo->lastInsertId();
        }

        // We return true or false
        return $insertedRows;
    }

    protected function update() {
        // TODO
    }

    public function delete() {
        // TODO
    }

    public function jSonSerialize() {
        // TODO
    }

    // GETTERS

    /**
     * Get the value of title
     */ 
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Get the value of description
     */ 
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Get the value of picture
     */ 
    public function getPicture()
    {
        return $this->picture;
    }

    // SETTERS

    /**
     * Set the value of title
     */ 
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * Set the value of description
     */ 
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * Set the value of picture
     *
     * @return  self
     */ 
    public function setPicture($picture)
    {
        $this->picture = $picture;

        return $this;
    }
}