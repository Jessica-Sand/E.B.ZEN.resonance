<?php

namespace App\Models;

use oFramework\Utils\Database;
use PDO;
use Symfony\Component\VarDumper\Cloner\Data;

class Category extends  \oFramework\Models\CoreModel {

    protected $title;
    protected $description;
    protected $picture;

    // I must implements these methods

    /** 
     * Method to find a category with an id
     * 
     * @param int 
     * @return Category
    */

    public static function find($categoryId) {
        $pdo = Database::getPDO();

        $sql = 'SELECT * FROM `category` WHERE `id` =' .$categoryId;

        $pdoStatement = $pdo->query($sql);

        $category = $pdoStatement->fetchObject('App\Models\Category');

        return $category;

    }

    public static function findAll() {
        $pdo = Database::getPDo();

        $sql = 'SELECT *
            FROM category';

        $pdoStatement = $pdo->query($sql);

        $results = $pdoStatement->fetchAll(PDO::FETCH_CLASS, 
        'App\Models\Category');

        return $results;
    }

    /**
     * Method to save a new object in the table category
     *
     * @return bool
     */
    protected function insert() {
        $pdo = Database::getPDO();
        $sql = "INSERT INTO `category` (title, description, picture)
                VALUES (:title, :description, :picture)";
        $pdoStatement = $pdo->prepare($sql);

        // The method 'execute' returns :
        // - TRUE if it successed
        // - FALSE if not
        $insertedRows = $pdoStatement->execute([
            ':title' => $this->title,
            ':description' => $this->description,
            ':picture' => $this->picture
        ]);
        
        // If at least one row is added
        if ($insertedRows === true) {
            // Then we recover the autoincremated id generated by MySQL
            $this->id = $pdo->lastInsertId();
        }

        // We return true or false
        return $insertedRows;
    }

    protected function update() {
        $pdo = Database::getPDO();

        $sql = "UPDATE `category`
                SET title = :title,
                    description = :description,
                    picture = :picture,
                    updated_at = NOW()
                WHERE id = :id
                ";
        
        $pdoStatement = $pdo->prepare($sql);

        $updatedRow = $pdoStatement->execute([
            ':title' => $this->title,
            ':description' => $this->description,
            ':picture' => $this->picture,
            ':id' => $this->id
        ]);

        if ($updatedRow === true) {
            $this->id = $pdo->lastInsertId();
        }

        return $updatedRow;
    }

    public function delete() {
        $pdo = Database::getPDO();

        $sql = "DELETE FROM `category`
                WHERE id = :id";

        $pdoStatement = $pdo->prepare($sql);

        $deletedRow = $pdoStatement->execute([
            ':id' => $this->id
        ]);

        return $deletedRow;
    }

    /**
     * Method to recover all the category associat the the treatment with the ID equals to $treatmentId
     *
     * @return void
     */
    public static function findAllByTreatmentId($treatmentId) {
        // 1)
        $pdo = Database::getPDO();

        // 2) On prépare la requete SQL
        $sql = 'SELECT category_id, category.title
                FROM treatment_category
                INNER JOIN category ON category.id = treatment_category.category_id
                WHERE treatment_id = :treatment_id
        ';

        // 3) On prépare pour éviter toute injection sql
        $pdoStatement = $pdo->prepare($sql);

        // 4) On execute la requete
        $pdoStatement->execute([
            ':treatment_id' => $treatmentId
        ]);

        // 5) On Retourne le résultat de la requete
        return $pdoStatement->fetchAll(PDO::FETCH_CLASS, self::class);
    }

    // GETTERS

    /**
     * Get the value of title
     */ 
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Get the value of description
     */ 
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Get the value of picture
     */ 
    public function getPicture()
    {
        return $this->picture;
    }

    // SETTERS

    /**
     * Set the value of title
     */ 
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * Set the value of description
     */ 
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * Set the value of picture
     *
     * @return  self
     */ 
    public function setPicture($picture)
    {
        $this->picture = $picture;

        return $this;
    }
}